basic operation
transversal - >accessing every element in an array.
//both the insertion and deletion require 1 extra space so increase used_size by 1,least dont think about
complexities but if your used_size exceeds total allocated size we have to take a new structure with increased we
have seen this in vector element in c++ it doubles its size evertime limit exceeds this implementation although
not very neccessary but very intuitive for deep knowledge yeah its neccessary 
insertion->
    case 1 . order matters
    worst cases -> you take the value,index and insert it that index and shift the other elements ahead 
    and in worst you have to insert at O index so at least n shift so O[n]. 
    best case ->last element easy no shifting O[1]

    case two. order doesnt matter//usually not followed
     any case ->take the value and insert in at the index and 
deletion->
    case 1 . order matters
    worst cases -> you take the index and delete it that index and shift the other elements in front 
    and in worst you have to delete at O index so at least n shift so O[n].
    best case ->last element easy no shifting O[1]
    rest similar as insertion
searching > we can implement it using two algo's
        -->linear searching .. full transversal
        -->binary searching .. advanced O[logn] concept very useful//array must be sorted
        // i know binary search and its among best searching algos out there
        // we take some value 
        // we check if the mid > or < required_value
        //use low , high
        //check binarysearchsourcecode file
        //mit lectures are very good CS50 is good on this too 


